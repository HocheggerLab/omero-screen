name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Add permissions for the workflow to push changes
permissions:
  contents: write

jobs:
  quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      database:
        image: "postgres:14"
        env:
          POSTGRES_USER: omero
          POSTGRES_DB: omero
          POSTGRES_PASSWORD: omero
        volumes:
          - "database:/var/lib/postgresql/data"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      omeroserver:
        image: "openmicroscopy/omero-server:5"
        env:
          CONFIG_omero_db_host: database
          CONFIG_omero_db_user: omero
          CONFIG_omero_db_pass: omero
          CONFIG_omero_db_name: omero
          ROOTPASS: omero
        ports:
          - "4063:4063"
          - "4064:4064"
        volumes:
          - "omero:/OMERO"
        # Health check runs in the docker container; an omero login command requires omero CLI to be installed.
        # This is not available in the docker image so we cannot perform a health check.
        # options: >-
        #     --health-cmd "omero login root@localhost:4064 --password omero"
        #     --health-interval 10s
        #     --health-timeout 5s
        #     --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Lint with Ruff
        run: uv run ruff check .

      - name: Format with Ruff
        run: uv run ruff format --check .

      - name: Type check with mypy
        run: uv run mypy src

      - name: Set-up env
        run: |
          echo "ENV=development" >> $GITHUB_ENV
          echo "USERNAME=root" >> $GITHUB_ENV
          echo "PASSWORD=omero" >> $GITHUB_ENV
          echo "HOST=localhost" >> $GITHUB_ENV
          echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          echo "LOG_FILE_PATH=logs/app.log" >> $GITHUB_ENV
          echo "LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s" >> $GITHUB_ENV
          echo "ENABLE_CONSOLE_LOGGING=True" >> $GITHUB_ENV
          echo "ENABLE_FILE_LOGGING=False" >> $GITHUB_ENV
          echo "TEST_IMAGE_SIZE=540" >> $GITHUB_ENV

      - name: Run tests
        run: |
          uv run pytest tests/ -v --ignore=tests/e2e_tests/

      - name: Generate documentation plots
        run: |
          cd packages/omero-screen-plots/docs
          uv run python generate_example_plots.py
        env:
          # Use the same environment as tests
          ENV: development
          USERNAME: root
          PASSWORD: omero
          HOST: localhost
          LOG_LEVEL: DEBUG
          LOG_FILE_PATH: logs/app.log
          LOG_FORMAT: "%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s"
          ENABLE_CONSOLE_LOGGING: True
          ENABLE_FILE_LOGGING: False
          TEST_IMAGE_SIZE: 540
          MPLBACKEND: Agg

      - name: Commit generated plots
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/omero-screen-plots/docs/_static/*.svg
          if git diff --staged --quiet; then
            echo "No plot changes to commit"
          else
            git commit -m "docs: update generated documentation plots [skip ci]"
            git push
          fi
